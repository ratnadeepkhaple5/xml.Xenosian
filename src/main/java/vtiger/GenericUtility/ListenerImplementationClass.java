package vtiger.GenericUtility;

import java.io.IOException;

import org.testng.ITestContext;
import org.testng.ITestListener;
import org.testng.ITestResult;
import org.testng.Reporter;

/**
 * This class provides implementation to all the abstract methods present in
 *  ITestListener interface
 *  
 * @author Ratnadeep
 *
 */
public class ListenerImplementationClass implements ITestListener{

	@Override
	public void onTestStart(ITestResult result) {
		
		String methodname = result.getMethod().getMethodName();
		Reporter.log(methodname+" ->test execution started", true);
		//reporter -> class present in testNg used to log messages
		//that will be included in the HTML reports generated by TestNG.
	}

	@Override
	public void onTestSuccess(ITestResult result) {
		String methodname = result.getMethod().getMethodName();
		Reporter.log(methodname+" ->test passed", true);
	}

	@Override
	public void onTestFailure(ITestResult result) {
		
		WebdriverUtility wUtil=new WebdriverUtility();
		JavaUtility jUtil=new JavaUtility();
		
		String methodname=result.getMethod().getMethodName();
		
		String screenshotName = methodname+"-"+jUtil.getsystemDateFormat();
		
		try {
			String path = wUtil.takesSceenshot(BaseClass.sDriver, screenshotName);
			
		} catch (IOException e) {
			
			e.printStackTrace();
		}
		
		Reporter.log(methodname+" execution is failed", true);
		Reporter.log(result.getThrowable().toString()+" <-reason for failure",true);
		
		//The throwable that was thrown while running the method, or null 
		//if no exception was thrown.
	}

	@Override
	public void onTestSkipped(ITestResult result) {
		String methodname = result.getMethod().getMethodName();
		Reporter.log(methodname+" <-is skipped",true);
		Reporter.log(result.getThrowable().toString()+" <-reason for skipped", false);
	}

	@Override
	public void onTestFailedButWithinSuccessPercentage(ITestResult result) {
		
	}

	@Override
	public void onTestFailedWithTimeout(ITestResult result) {
		
	}

	@Override
	public void onStart(ITestContext context) {
		Reporter.log("Test Execution Started", true);
	}

	@Override
	public void onFinish(ITestContext context) {
		Reporter.log("Test Execution Finished", true);
	}
}
